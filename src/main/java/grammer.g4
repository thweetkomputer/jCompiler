grammer calc;

Number: DecimalConst | OctalConst | HexadecimalConst;
DecimalConst: NonzeroDigit | DecimalConst Digit;
OctalConst: '0' | OctalConst OctalDigit;
HexadecimalConst: HexadecimalPrefix HexadecimalDigit | HexadecimalConst HexadecimalDigit;
HexadecimalPrefix: '0x' | '0X';
NonzeroDigit: [1-9];
OctalDigit: [1-7];
Digit: '0' | nonzero-digit;
HexadecimalDigit: [0-9] | [a-f] | [A-F];
Nondigit: '_' | [a-z] | [A-Z];
Ident: Nondigit | Ident Nondigit | Ident Digit;
CompUnit: FuncDef;
Decl: ConstDecl | VarDecl;
ConstDecl: 'const' BType ConstDef { ',' ConstDef } ';';
BType: 'int';
ConstDef: Ident '=' ConstInitVal;
ConstInitVal: ConstExp;
ConstExp: AddExp;
VarDecl: BType VarDef { ',' VarDef } ';';
VarDef: Ident | Ident '=' InitVal;
InitVal: Exp;
FuncDef: FuncType Ident '(' ')' Block; // 保证当前 Ident 只为 "main"
FuncType: 'int';
Block: '{' { BlockItem } '}';
BlockItem: Decl | Stmt;
Stmt: LVal '=' Exp ';' | [Exp] ';' | 'return' Exp ';';
Exp: AddExp;
LVal: Ident;
PrimaryExp: '(' Exp ')' | LVal | Number;
AddExp: MulExp | AddExp ('+' | '−') MulExp;
MulExp: UnaryExp ('*' | '/' | '%') UnaryExp;
UnaryExp: PrimaryExp | Ident '(' [FuncRParams] ')' | UnaryOp UnaryExp;
FuncRParams: Exp { ',' Exp };
UnaryOp: '+' | '-';
